<?php
/* 
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */
 
class Product extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Product_model');

		$this->load->model('Product_category_model');

	}
	function view($id)
    {	
		$data['products'] = $this->Product_model->view($id);

		foreach($data['products'] as $rs_cat)
			{   
				 
				$cid = $rs_cat['cid'];
				$title = $rs_cat['name'];
				$data['category'] = $this->Product_model->view_categories($cid);				
				
			}
			require 'template/front/header.php';

			$this->load->view('product/view',$data);
        

		



    }
	//	แสดงแพ็คเกจโดยหมวดหมู่
	function category($id)
    {	
		$data['category'] = $this->Product_category_model->get_all_product_categories();
        $data['products'] = $this->Product_model->show_categories($id);

		foreach($data['category'] as $rs_cat)
			{   
				$rs_cat['name']; 
				$title = $rs_cat['name']; 
			}



		//$title = 'ประเภท ';
		require 'template/front/header.php';
        $this->load->view('product/packet',$data);



    }
	//	แสดงแพ็คเกจทั้งหมด
	function Show()
    {	
		$data['category'] = $this->Product_category_model->get_all_product_categories();
        $data['products'] = $this->Product_model->show_packet();
		$title = 'หน้าแรก';
		require 'template/front/header.php';
        $this->load->view('product/showe',$data);



    }
    function fb()
    {   
        
        $this->load->view('facebook');



    }
    function packet()
    {   
        $data['category'] = $this->Product_category_model->get_all_product_categories();
        $data['products'] = $this->Product_model->show_packet();
        $title = 'หน้าแรก';
        require 'template/front/header.php';
        $this->load->view('product/packet',$data);



    }

    /*
     * Listing of products
     */
    function index()
    {
        //$data['products'] = $this->Product_model->get_all_products();

		//require 'template/front/header.php';
        $this->load->view('Tavel');



    }

    /*
     * Adding a new product
     */
    function add()
    {   


        if(isset($_POST) && count($_POST) > 0)     
        {   


            $params = array(
				'name' => $this->input->post('name'),
				'price' => $this->input->post('price'),
				'brandname' => $this->input->post('brandname'),
				'detail' => $this->input->post('detail'),
				'image' => $this->input->post('image'),
				'created' => date('Y-m-d H:i:s'),
				'product_categorie_id' => $this->input->post('product_categorie_id'),
            );
            
            $product_id = $this->Product_model->add_product($params);
            redirect('User/back_packet');
        }
        else
        {   
            $data['product_categories'] = $this->Product_category_model->get_all_product_categories();
            require 'template/back/header.php';
            $this->load->view('product/add',$data);
        }
    }  

    /*
     * Editing a product
     */
    function edit($id)
    {   
        // check if the product exists before trying to edit it
        $product = $this->Product_model->get_product($id);
        
        if(isset($product['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'name' => $this->input->post('name'),
					'price' => $this->input->post('price'),
					'brandname' => $this->input->post('brandname'),
					'detail' => $this->input->post('detail'),
					'image' => $this->input->post('image'),
					'created' => $this->input->post('created'),
					'product_categorie_id' => $this->input->post('product_categorie_id'),
                );
                
                $this->Product_model->update_product($id,$params);            
                redirect('User/back_packet');
            }
            else
            {   
                $data['product_categories'] = $this->Product_category_model->get_all_product_categories();
                $data['product'] = $this->Product_model->get_product($id);
                require 'template/back/header.php';
                $this->load->view('product/edit',$data);
            }
        }
        else
            show_error('The product you are trying to edit does not exist.');
    } 

    /*
     * Deleting product
     */
    function remove($id)
    {
        $product = $this->Product_model->get_product($id);

        // check if the product exists before trying to delete it
        if(isset($product['id']))
        {
            $this->Product_model->delete_product($id);
            redirect('User/back_packet');
        }
        else
            show_error('The product you are trying to delete does not exist.');
    }
    
}
